---
# ignore the version error
openapi: 3.0.3
info:
  title: Aha! REST API
  description: |
    API for interacting with Aha! product management platform.

    ## Rate Limiting
    The API enforces rate limits to ensure fair usage:
    - **300 requests per minute** per account
    - **20 requests per second** per account
    
    When rate limits are exceeded, the API returns a `429 Too Many Requests` response with a `retry_after` header indicating when to retry.

    ## Authentication
    The API supports two authentication methods:
    - **OAuth 2.0**: For web applications and integrations requiring user consent
    - **API Tokens**: For server-to-server integrations and personal access
    
    ## Request Headers
    - **User-Agent**: Required header to identify the client application
    - **Content-Type**: Set to `application/json` for POST/PUT requests
    - **Authorization**: Bearer token or OAuth access token

    ## Response Format
    All responses are in JSON format. List endpoints include pagination metadata in the `meta.pagination` object.

    ## Error Handling
    The API uses standard HTTP status codes and includes detailed error messages in the response body for debugging.
  version: 1.0.4

servers:
  - url: https://{subdomain}.aha.io/api/v1
    description: Aha! API server
    variables:
      subdomain:
        default: mycompany
        description: Your Aha! account subdomain

# Paths are referenced from separate files
paths:
  # Users
  /users:
    $ref: './paths/users.yaml#/users'
  /users/{id}:
    $ref: './paths/users.yaml#/users_by_id'

  # Features
  /features:
    $ref: './paths/features/list.yaml#/list_features'
  /goals/{goal_id}/features:
    $ref: './paths/features/goal_features_path.yaml#/goal_features_path'
  /initiatives/{initiative_id}/features:
    $ref: './paths/features/initiative_features_path.yaml#/initiative_features_path'
  /products/{product_id}/features:
    $ref: './paths/features/product_features_path.yaml#/product_features_path'
  /releases/{release_id}/features:
    $ref: './paths/features/release_features_path.yaml#/release_features_path'
  /features/{id}:
    $ref: './paths/features/feature_by_id_path.yaml#/feature_by_id_path'
  /features/{id}/custom_fields:
    $ref: './paths/features/feature_custom_fields_path.yaml#/feature_custom_fields_path'
  /features/{id}/custom_fields/tag:
    $ref: './paths/features/feature_custom_fields_tag_path.yaml#/feature_custom_fields_tag_path'
  /features/{id}/custom_fields/worksheet:
    $ref: './paths/features/feature_custom_worksheet_fields_path.yaml#/feature_custom_worksheet_fields_path'
  /features/{id}/epic:
    $ref: './paths/features/feature_epic_path.yaml#/feature_epic_path'
  /features/{id}/goals:
    $ref: './paths/features/feature_goals_path.yaml#/feature_goals_path'
  /features/{id}/progress:
    $ref: './paths/features/feature_progress_path.yaml#/feature_progress_path'
  /features/{id}/progress_source:
    $ref: './paths/features/feature_progress_source_path.yaml#/feature_progress_source_path'
  /features/{id}/release:
    $ref: './paths/features/feature_release_path.yaml#/feature_release_path'
  /features/{id}/score:
    $ref: './paths/features/feature_score_path.yaml#/feature_score_path'
  /features/{id}/tags:
    $ref: './paths/features/feature_tags_array_path.yaml#/feature_tags_array_path'
  /features/{id}/convert_to_epic:
    $ref: './paths/features/feature_convert_to_epic_path.yaml#/feature_convert_to_epic_path'

  # Comments
  /features/{feature_id}/comments:
    $ref: './paths/comments.yaml#/feature_comments'
  /epics/{epic_id}/comments:
    $ref: './paths/comments.yaml#/epic_comments'
  /requirements/{requirement_id}/comments:
    $ref: './paths/comments.yaml#/requirement_comments'
  /ideas/{idea_id}/comments:
    $ref: './paths/comments.yaml#/idea_comments'
  /initiatives/{initiative_id}/comments:
    $ref: './paths/comments.yaml#/initiative_comments'
  /goals/{goal_id}/comments:
    $ref: './paths/comments.yaml#/goal_comments'
  /releases/{release_id}/comments:
    $ref: './paths/comments.yaml#/release_comments'
  /release_phases/{release_phase_id}/comments:
    $ref: './paths/comments.yaml#/release_phase_comments'
  /todos/{todo_id}/comments:
    $ref: './paths/comments.yaml#/todo_comments'
  /products/{product_id}/comments:
    $ref: './paths/comments.yaml#/product_comments'

  # Epics
  /epics:
    $ref: './paths/epics.yaml#/epics_global_list'
  /products/{product_id}/epics:
    $ref: './paths/epics.yaml#/product_epics'
  /releases/{release_id}/epics:
    $ref: './paths/epics.yaml#/release_epics'
  /epics/{epic_id}:
    $ref: './paths/epics.yaml#/epic_by_id'
  /epics/{epic_id}/features:
    $ref: './paths/features/epic_features_path.yaml#/epic_features_path'
  /goals/{goal_id}/epics:
    $ref: './paths/epics.yaml#/goal_epics'
  /initiatives/{initiative_id}/epics:
    $ref: './paths/epics.yaml#/initiative_epics'

  # Competitors
  /products/{product_id}/competitors:
    $ref: './paths/competitors.yaml#/product_competitors'
  /competitors/{competitor_id}:
    $ref: './paths/competitors.yaml#/competitor_by_id'

  # Products
  /products:
    $ref: './paths/products/list.yaml#/list_products'
  /products/{id}:
    $ref: './paths/products/get.yaml#/product_by_id'

  # Initiatives
  /initiatives:
    $ref: './paths/initiatives/list.yaml#/list_initiatives'
  /products/{product_id}/initiatives:
    $ref: './paths/initiatives/create.yaml#/product_initiatives_path'
  /initiatives/{id}:
    $ref: './paths/initiatives/get.yaml#/initiative_by_id_path'

  # Ideas
  /ideas:
    $ref: './paths/ideas/ideas_list.yaml#/ideas_global_list'
  /products/{product_id}/ideas:
    $ref: './paths/ideas/product_ideas_path.yaml#/product_ideas_path'
  /products/{product_id}/ideas/portal_user:
    $ref: './paths/ideas/create_by_portal_user.yaml#/product_ideas_portal_user_path'
  /products/{product_id}/ideas/with_category:
    $ref: './paths/ideas/create_with_category.yaml#/product_ideas_with_category_path'
  /products/{product_id}/ideas/with_score:
    $ref: './paths/ideas/create_with_score.yaml#/product_ideas_with_score_path'
  /ideas/{id}:
    $ref: './paths/ideas/idea_by_id_path.yaml#/idea_by_id_path'
  /ideas/{id}/promote:
    $ref: './paths/ideas/promote.yaml#/idea_promote_path'
  /ideas/{id}/votes:
    $ref: './paths/ideas/votes.yaml#/idea_votes_path'
  /ideas/{id}/endorsements:
    $ref: './paths/ideas/endorsements.yaml#/idea_endorsements_path'
  /ideas/{id}/spam:
    $ref: './paths/ideas/spam.yaml#/idea_spam_path'
  /ideas/{id}/watchers:
    $ref: './paths/ideas/watchers.yaml#/idea_watchers_path'

  # Idea Organizations
  /idea_organizations:
    $ref: './paths/idea_organizations.yaml#/idea_organizations_list'
  /idea_organizations/{id}:
    $ref: './paths/idea_organizations.yaml#/idea_organization_by_id'

  # Releases
  /releases:
    $ref: './paths/releases/list.yaml#/list_releases'
  /products/{product_id}/releases:
    $ref: './paths/releases/product_releases.yaml#/product_releases'
  /releases/{id}:
    $ref: './paths/releases/get.yaml#/release_by_id_path'

  # Goals
  /goals:
    $ref: './paths/goals/list.yaml#/goals_path'
  /goals/{id}:
    $ref: './paths/goals/get.yaml#/goal_by_id_path'
  /goals/{id}/progress:
    $ref: './paths/goals/progress.yaml#/goal_progress_path'

  # Strategic Models
  /strategic_models:
    $ref: './paths/strategic_models/list.yaml#/strategic_models_path'
  /strategic_models/{id}:
    $ref: './paths/strategic_models/get.yaml#/strategic_model_by_id_path'

  # Me (Current User)
  /me:
    $ref: './paths/me.yaml#/me_profile'
  /me/assigned:
    $ref: './paths/me.yaml#/me_assigned_records'
  /me/tasks:
    $ref: './paths/me.yaml#/me_pending_tasks'

  # Todos
  /todos:
    $ref: './paths/todos.yaml#/tasks'
  /todos/{id}:
    $ref: './paths/todos.yaml#/todo_by_id'

  # Requirements
  /requirements/{id}:
    $ref: './paths/requirements.yaml#/requirement_by_id'

  # Release Phases
  /release_phases:
    $ref: './paths/release_phases.yaml#/release_phases'
  /release_phases/{id}:
    $ref: './paths/release_phases.yaml#/release_phase_by_id'

# Components are referenced from separate files
components:
  schemas:
    # User related schemas
    User:
      $ref: './schemas/users.yaml#/User'

    # Feature related schemas
    FeatureCreateRequest:
      $ref: './schemas/features/create_request.yaml#/FeatureCreateRequest'
    FeatureUpdateRequest:
      $ref: './schemas/features/update_request.yaml#/FeatureUpdateRequest'
    FeatureCreateResponse:
      $ref: './schemas/features/create_response.yaml#/FeatureCreateResponse'
    FeatureUpdateResponse:
      $ref: './schemas/features/update_response.yaml#/FeatureUpdateResponse'
    Feature:
      $ref: './schemas/features/feature.yaml#/Feature'
    FeaturesListResponse:
      $ref: './schemas/features/list_response.yaml#/FeaturesListResponse'
    FeatureGetResponse:
      $ref: './schemas/features/get_response.yaml#/FeatureGetResponse'

    # Comment related schemas
    CommentCreateRequest:
      $ref: './schemas/comments.yaml#/CommentCreateRequest'
    Comment:
      $ref: './schemas/comments.yaml#/Comment'

    # Competitor related schemas
    CompetitorCreateRequest:
      $ref: './schemas/competitors.yaml#/CompetitorCreateRequest'
    CompetitorUpdateRequest:
      $ref: './schemas/competitors.yaml#/CompetitorUpdateRequest'
    Competitor:
      $ref: './schemas/competitors.yaml#/Competitor'

    # Epic related schemas
    EpicUpdateRequest:
      $ref: './schemas/epics.yaml#/EpicUpdateRequest'
    EpicCreateRequest:
      $ref: './schemas/epics.yaml#/EpicCreateRequest'
    Epic:
      $ref: './schemas/epics.yaml#/Epic'

    # Idea related schemas
    IdeaCreateRequest:
      $ref: './schemas/ideas/create_request.yaml#/IdeaCreateRequest'
    IdeaCreateByPortalUserRequest:
      $ref: './schemas/ideas/create_by_portal_user_request.yaml#/IdeaCreateByPortalUserRequest'
    IdeaUpdateRequest:
      $ref: './schemas/ideas/update_request.yaml#/IdeaUpdateRequest'
    IdeaPromoteRequest:
      $ref: './schemas/ideas/promote_request.yaml#/IdeaPromoteRequest'
    IdeaVoteRequest:
      $ref: './schemas/ideas/vote_request.yaml#/IdeaVoteRequest'
    IdeaEndorsementRequest:
      $ref: './schemas/ideas/endorsement_request.yaml#/IdeaEndorsementRequest'
    IdeaWatchersRequest:
      $ref: './schemas/ideas/watchers_request.yaml#/IdeaWatchersRequest'
    IdeaResponse:
      $ref: './schemas/ideas/idea.yaml#/IdeaResponse'
    IdeasListResponse:
      $ref: './schemas/ideas/list_response.yaml#/IdeasListResponse'

    # Product related schemas
    Product:
      $ref: './schemas/products/product.yaml#/Product'
    ProductGetResponse:
      $ref: './schemas/products/get_response.yaml#/ProductGetResponse'
    ProductsListResponse:
      $ref: './schemas/products/list_response.yaml#/ProductsListResponse'

    # Initiative related schemas
    InitiativeCreateRequest:
      $ref: './schemas/initiatives/create_request.yaml#/InitiativeCreateRequest'
    InitiativeResponse:
      $ref: './schemas/initiatives/initiative.yaml#/InitiativeResponse'
    InitiativesListResponse:
      $ref: './schemas/initiatives/list_response.yaml#/InitiativesListResponse'

    # Release related schemas
    ReleaseCreateRequest:
      $ref: './schemas/releases/create_request.yaml#/ReleaseCreateRequest'
    ReleaseUpdateRequest:
      $ref: './schemas/releases/update_request.yaml#/ReleaseUpdateRequest'
    Release:
      $ref: './schemas/releases/release.yaml#/Release'
    ReleaseGetResponse:
      $ref: './schemas/releases/get_response.yaml#/ReleaseGetResponse'
    ReleasesListResponse:
      $ref: './schemas/releases/list_response.yaml#/ReleasesListResponse'

    # Goal related schemas
    GoalCreateRequest:
      $ref: './schemas/goals/create_request.yaml#/GoalCreateRequest'
    GoalUpdateRequest:
      $ref: './schemas/goals/update_request.yaml#/GoalUpdateRequest'
    GoalProgressUpdateRequest:
      $ref: './schemas/goals/progress_update_request.yaml#/GoalProgressUpdateRequest'
    Goal:
      $ref: './schemas/goals/goal.yaml#/Goal'
    GoalGetResponse:
      $ref: './schemas/goals/get_response.yaml#/GoalGetResponse'
    GoalsListResponse:
      $ref: './schemas/goals/list_response.yaml#/GoalsListResponse'

    # Strategic Model related schemas
    StrategicModelCreateRequest:
      $ref: './schemas/strategic_models/create_request.yaml#/StrategicModelCreateRequest'
    StrategicModelUpdateRequest:
      $ref: './schemas/strategic_models/update_request.yaml#/StrategicModelUpdateRequest'
    StrategicModel:
      $ref: './schemas/strategic_models/strategic_model.yaml#/StrategicModel'
    StrategicModelGetResponse:
      $ref: './schemas/strategic_models/get_response.yaml#/StrategicModelGetResponse'
    StrategicModelsListResponse:
      $ref: './schemas/strategic_models/list_response.yaml#/StrategicModelsListResponse'

    # Me (Current User) related schemas
    MeProfileResponse:
      $ref: './schemas/me/profile_response.yaml#/MeProfileResponse'
    MeAssignedRecordsResponse:
      $ref: './schemas/me/assigned_records_response.yaml#/MeAssignedRecordsResponse'
    MePendingTasksResponse:
      $ref: './schemas/me/pending_tasks_response.yaml#/MePendingTasksResponse'

    # Idea Organization related schemas
    IdeaOrganizationCreateRequest:
      $ref: './schemas/idea_organizations/create_request.yaml#/IdeaOrganizationCreateRequest'
    IdeaOrganizationUpdateRequest:
      $ref: './schemas/idea_organizations/update_request.yaml#/IdeaOrganizationUpdateRequest'
    IdeaOrganization:
      $ref: './schemas/idea_organizations/idea_organization.yaml#/IdeaOrganization'
    IdeaOrganizationGetResponse:
      $ref: './schemas/idea_organizations/get_response.yaml#/IdeaOrganizationGetResponse'
    IdeaOrganizationsListResponse:
      $ref: './schemas/idea_organizations/list_response.yaml#/IdeaOrganizationsListResponse'

    # Common pagination schema
    PaginationMeta:
      type: object
      properties:
        pagination:
          type: object
          properties:
            current_page:
              type: integer
              description: Current page number (1-based)
              minimum: 1
              example: 1
            per_page:
              type: integer
              description: Number of items per page
              minimum: 1
              maximum: 200
              example: 30
            total_pages:
              type: integer
              description: Total number of pages
              minimum: 0
              example: 5
            total_records:
              type: integer
              description: Total number of records across all pages
              minimum: 0
              example: 142
            next_page:
              type: integer
              nullable: true
              description: Next page number (null if no next page)
              example: 2
            prev_page:
              type: integer
              nullable: true
              description: Previous page number (null if no previous page)
              example: null

  parameters:
    PageParameter:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination (starts at 1)
    PerPageParameter:
      name: per_page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 30
      description: Number of items per page (max 200)
    FieldsParameter:
      name: fields
      in: query
      required: false
      schema:
        type: string
      description: Comma-separated list of fields to include in response for customization
    DisableMailersParameter:
      name: disable_mailers
      in: query
      required: false
      schema:
        type: boolean
        default: false
      description: Set to true to disable sending email notifications

  responses:
    RateLimitResponse:
      description: Rate limit exceeded - Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Rate limit exceeded"
              message:
                type: string
                example: "API rate limit exceeded. Please wait before making additional requests."
              retry_after:
                type: integer
                description: Number of seconds to wait before retrying
                example: 60
    GatewayTimeoutResponse:
      description: Gateway timeout - Request timed out
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Gateway timeout"
              message:
                type: string
                example: "The request timed out. Please try again later."

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: Bearer token authentication using API tokens
    OAuth2:
      type: oauth2
      description: OAuth 2.0 authorization
      flows:
        authorizationCode:
          authorizationUrl: https://{subdomain}.aha.io/oauth/authorize
          tokenUrl: https://{subdomain}.aha.io/oauth/token
          scopes: {}

security:
  - BearerAuth: []
  - OAuth2: []

tags:
  - name: Competitors
    description: Competitive analysis and competitor tracking
  - name: Users
    description: User management and authentication
  - name: Features
    description: Product features and functionality management
  - name: Releases
    description: Release planning and management
  - name: Comments
    description: Comments and discussions on various resources
  - name: Epics
    description: Epic management and feature grouping
  - name: Requirements
    description: Requirements and specification management
  - name: Ideas
    description: Idea management and innovation tracking
  - name: Initiatives
    description: Strategic initiatives and high-level planning
  - name: Goals
    description: Goal setting and OKR management
  - name: Strategic Models
    description: Strategic planning and modeling
  - name: Release Phases
    description: Release phase and milestone management
  - name: Todos
    description: Task and todo management
  - name: Products
    description: Product catalog and configuration
  - name: Me
    description: Current user profile and settings
  - name: Idea Organizations
    description: Idea organization and categorization
